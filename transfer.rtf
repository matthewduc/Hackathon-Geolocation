{\rtf1\ansi\ansicpg1252\cocoartf1671
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red108\green121\blue134;\red31\green31\blue36;\red255\green255\blue255;
\red122\green200\blue182;\red153\green232\blue213;\red252\green95\blue163;\red145\green212\blue98;\red150\green134\blue245;
\red252\green106\blue93;\red174\green243\blue125;}
{\*\expandedcolortbl;;\csgenericrgb\c42394\c47462\c52518;\csgenericrgb\c12054\c12284\c14131;\csgenericrgb\c100000\c100000\c100000;
\csgenericrgb\c47716\c78607\c71403;\csgenericrgb\c59926\c90967\c83488;\csgenericrgb\c98839\c37355\c63833;\csgenericrgb\c56799\c83212\c38450;\csgenericrgb\c58752\c52717\c95948;
\csgenericrgb\c98912\c41558\c36568;\csgenericrgb\c68215\c95290\c48909;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab593
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 //TODO: Request persmission for notifications
\f1 \cf0 \

\f0 \cf4         \cf5 UNUserNotificationCenter\cf4 .\cf6 current\cf4 ().\cf6 requestAuthorization\cf4 (options: [.\cf5 alert\cf4 , .\cf5 sound\cf4 , .\cf5 badge\cf4 ], completionHandler: \{didAllow, error \cf7 in
\f1 \cf0 \

\f0 \cf4         \})
\f1 \cf0 \

\f0 \cf4         
\f1 \cf0 \

\f0 \cf4         \cf2 //TODO:Set up the location manager here.
\f1 \cf0 \

\f0 \cf4         \cf8 locationManager\cf4 .\cf5 delegate\cf4  = \cf7 self
\f1 \cf0 \

\f0 \cf4         \cf8 locationManager\cf4 .\cf5 desiredAccuracy\cf4  = \cf5 kCLLocationAccuracyKilometer
\f1 \cf0 \

\f0 \cf4         \cf8 locationManager\cf4 .\cf6 requestAlwaysAuthorization\cf4 ()
\f1 \cf0 \

\f0 \cf4         \cf8 locationManager\cf4 .\cf6 startUpdatingLocation\cf4 ()
\f1 \cf0 \

\f0 \cf4         
\f1 \cf0 \

\f0 \cf4         \cf2 // coordination
\f1 \cf0 \

\f0 \cf4         \cf7 let\cf4  geoFenceCenter : \cf5 CLLocationCoordinate2D\cf4  = \cf6 CLLocationCoordinate2DMake\cf4 (\cf9 34.0689\cf4 , \cf9 118.4452\cf4 )
\f1 \cf0 \

\f0 \cf4         
\f1 \cf0 \

\f0 \cf4         \cf6 print\cf4 (\cf10 "staring geofencing"\cf4 )
\f1 \cf0 \

\f0 \cf4         \cf11 monitorRegionAtLocation\cf4 (center: geoFenceCenter, identifier: \cf10 "UCLA"\cf4 )\
\
   
\f1 \cf0 \

\f0 \cf4     
\f1 \cf0 \

\f0 \cf4     \cf7 func\cf4  triggerNotification(bool : \cf5 Bool\cf4  )\{
\f1 \cf0 \

\f0 \cf4         \cf7 let\cf4  content = \cf5 UNMutableNotificationContent\cf4 ()
\f1 \cf0 \

\f0 \cf4         content.\cf5 title\cf4  = \cf10 "Time to update you timecard!"
\f1 \cf0 \

\f0 \cf4         content.\cf5 badge\cf4  = \cf9 1
\f1 \cf0 \

\f0 \cf4         
\f1 \cf0 \

\f0 \cf4         \cf7 if\cf4  bool == \cf7 true\cf4 \{ \cf2 // user entered work
\f1 \cf0 \

\f0 \cf4             content.\cf5 body\cf4  = \cf10 "Tap to clock in!"
\f1 \cf0 \

\f0 \cf4         \}
\f1 \cf0 \

\f0 \cf4         \cf7 else\cf4 \{ \cf2 // user exited work
\f1 \cf0 \

\f0 \cf4             content.\cf5 body\cf4  = \cf10 "Tap to clock out!"
\f1 \cf0 \

\f0 \cf4         \}
\f1 \cf0 \

\f0 \cf4         
\f1 \cf0 \

\f0 \cf4         \cf7 let\cf4  trigger = \cf5 UNTimeIntervalNotificationTrigger\cf4 (timeInterval: \cf9 1\cf4 , repeats: \cf7 false\cf4 )
\f1 \cf0 \

\f0 \cf4         \cf7 let\cf4  request = \cf5 UNNotificationRequest\cf4 (identifier: \cf10 "updateTimeCard"\cf4 , content: content, trigger: trigger)
\f1 \cf0 \

\f0 \cf4         
\f1 \cf0 \

\f0 \cf4         \cf5 UNUserNotificationCenter\cf4 .\cf6 current\cf4 ().\cf6 add\cf4 (request, withCompletionHandler: \cf7 nil\cf4 )
\f1 \cf0 \

\f0 \cf4     \}
\f1 \cf0 \

\f0 \cf4   
\f1 \cf0 \

\f0 \cf4     \cf2 //Monitoring a region around the specified coordinate
\f1 \cf0 \

\f0 \cf4     \cf7 func\cf4  monitorRegionAtLocation(center: \cf5 CLLocationCoordinate2D\cf4 , identifier: \cf5 String\cf4  ) \{
\f1 \cf0 \

\f0 \cf4         \cf2 // Make sure the app is authorized.
\f1 \cf0 \

\f0 \cf4         \cf7 if\cf4  \cf5 CLLocationManager\cf4 .\cf6 authorizationStatus\cf4 () == .\cf6 authorizedAlways\cf4  \{
\f1 \cf0 \

\f0 \cf4             \cf2 // Make sure region monitoring is supported.
\f1 \cf0 \

\f0 \cf4             \cf7 if\cf4  \cf5 CLLocationManager\cf4 .\cf6 isMonitoringAvailable\cf4 (for: \cf5 CLCircularRegion\cf4 .\cf7 self\cf4 ) \{
\f1 \cf0 \

\f0 \cf4                 \cf2 // Register the region.
\f1 \cf0 \

\f0 \cf4                 \cf7 let\cf4  distance = \cf9 100
\f1 \cf0 \

\f0 \cf4                 \cf7 let\cf4  region = \cf5 CLCircularRegion\cf4 (center: center,
\f1 \cf0 \

\f0 \cf4                                               radius: \cf5 CLLocationDistance\cf4 (distance), identifier: identifier)
\f1 \cf0 \

\f0 \cf4                 region.\cf5 notifyOnEntry\cf4  = \cf7 true
\f1 \cf0 \

\f0 \cf4                 region.\cf5 notifyOnExit\cf4  = \cf7 true
\f1 \cf0 \

\f0 \cf4                 
\f1 \cf0 \

\f0 \cf4                 \cf8 locationManager\cf4 .\cf6 startMonitoring\cf4 (for: region)
\f1 \cf0 \

\f0 \cf4             \}
\f1 \cf0 \

\f0 \cf4         \}
\f1 \cf0 \

\f0 \cf4     \}
\f1 \cf0 \

\f0 \cf4     
\f1 \cf0 \

\f0 \cf4     \cf2 // Handling a region-entered notification
\f1 \cf0 \

\f0 \cf4     \cf7 func\cf4  locationManager(\cf7 _\cf4  manager: \cf5 CLLocationManager\cf4 , didEnterRegion region: \cf5 CLRegion\cf4 ) \{
\f1 \cf0 \

\f0 \cf4         \cf7 if\cf4  \cf7 let\cf4  region = region \cf7 as\cf4 ? \cf5 CLCircularRegion\cf4  \{
\f1 \cf0 \

\f0 \cf4             \cf7 let\cf4  identifier = region.\cf5 identifier
\f1 \cf0 \

\f0 \cf4             \cf6 print\cf4 (\cf10 "user entered region"\cf4 )
\f1 \cf0 \

\f0 \cf4             \cf6 print\cf4 (region.\cf5 identifier\cf4 )
\f1 \cf0 \

\f0 \cf4             \cf6 print\cf4 (\cf10 "monitoring is working"\cf4 )
\f1 \cf0 \

\f0 \cf4             \cf11 triggerNotification\cf4 (bool: \cf7 true\cf4 )
\f1 \cf0 \

\f0 \cf4         \}
\f1 \cf0 \

\f0 \cf4     \}
\f1 \cf0 \

\f0 \cf4     
\f1 \cf0 \

\f0 \cf4     \cf2 // Handling a region-exited notification
\f1 \cf0 \

\f0 \cf4     \cf7 func\cf4  locationManager(\cf7 _\cf4  manager: \cf5 CLLocationManager\cf4 , didExitRegion region: \cf5 CLRegion\cf4 ) \{
\f1 \cf0 \

\f0 \cf4             \cf7 if\cf4  \cf7 let\cf4  region = region \cf7 as\cf4 ? \cf5 CLCircularRegion\cf4  \{
\f1 \cf0 \

\f0 \cf4             \cf7 let\cf4  identifier = region.\cf5 identifier
\f1 \cf0 \

\f0 \cf4            \cf2 // triggerTaskAssociatedWithExitingRegionIdentifier(regionID: identifier)
\f1 \cf0 \

\f0 \cf4             \cf6 print\cf4 (\cf10 "user Exited region"\cf4 )
\f1 \cf0 \

\f0 \cf4             \cf6 print\cf4 (region.\cf5 identifier\cf4 )
\f1 \cf0 \

\f0 \cf4             \cf6 print\cf4 (\cf10 "monitoring is working"\cf4 )
\f1 \cf0 \

\f0 \cf4             \cf11 triggerNotification\cf4 (bool: \cf7 false\cf4 )
\f1 \cf0 \

\f0 \cf4         \}
\f1 \cf0 \

\f0 \cf4     \}}